{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialog","props","className","s","dialog","src","img","to","id","name","Message","message","maxLength100","maxLengthCreator","SendMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","messagesElements","dialogs","map","el","messages","mas","span","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","title","textInput","formData","sendMessage","newMessageText","compose","connect","actions","withAuthRedirect"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,IAAM,qBAAqB,UAAY,6B,sFCmBnOC,EAXqB,SAACC,GACjC,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,UACI,qBAAKC,IAAKJ,EAAMK,MAChB,cAAC,IAAD,CAASC,GAAI,YAAcN,EAAMO,GAAjC,SAAsCP,EAAMQ,WCCzCC,EARsB,SAACT,GAClC,OACI,8BACI,sBAAKC,UAAWC,IAAEQ,QAAlB,cAA6BV,EAAMU,QAAnC,U,6ECiDRC,EAAeC,YAAiB,KAgBhCC,EAAuBC,YAA6D,CAACC,KAAM,gBAApED,EATuG,SAACd,GAC/H,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAWC,YAAa,8BAAgCb,KAAM,iBAAkBc,SAAU,CAACC,IAAUZ,KACvH,gDAOGa,EA5DsB,SAACxB,GAElC,IAAIyB,EAAQzB,EAAM0B,YAEdC,GADkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAQtB,KAAMsB,EAAGtB,KAAMD,GAAIuB,EAAGvB,GAAIF,IAAKyB,EAAGzB,KAAUyB,EAAGvB,OAC9EkB,EAAMM,SAASF,KAAI,SAAAG,GAAG,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAItB,SAAcsB,EAAIzB,QAOzF,OACI,8BACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAK0B,KAAM,EAAX,SACI,cAAC,IAAD,CACIC,WAAW,aACXC,WAAYV,EAAMG,QAClBQ,WAAY,SAAAC,GAAI,OACZ,cAAC,IAAKC,KAAN,UACI,cAAC,IAAKA,KAAKC,KAAX,CACIC,OAAQ,cAAC,IAAD,CAAQpC,IAAG,sCAAiCiC,EAAK9B,MACzDkC,MAAO,cAAC,IAAD,CAASnC,GAAI,YAAc+B,EAAK9B,GAAhC,SAAqC8B,EAAK7B,gBAOrE,cAAC,IAAD,CAAKyB,KAAM,GAAX,SACI,sBAAKhC,UAAWC,IAAE6B,SAAlB,UACI,8BAAMJ,IACN,qBAAK1B,UAAWC,IAAEwC,UAAlB,SACI,cAAC7B,EAAD,CAAsBG,SA1BzB,SAAC2B,GAClB3C,EAAM4C,YAAYD,EAASE,gC,yBCVpBC,sBACXC,aAPkB,SAACtB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKE,CAACkB,YAAaI,IAAQJ,cAC/CK,IAFWH,CAGbtB","file":"static/js/4.d7b50d24.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"one\":\"Dialogs_one__1CUpu\",\"textInput\":\"Dialogs_textInput__iJZIq\"};","import s from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\ntype PropsType = {\n    img: string,\n    id: number,\n    name: string\n}\n\nconst Dialog: React.FC<PropsType> = (props) => {\n    return(\n        <div className={s.dialog}>\n            <img src={props.img}/>\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\n        </div>\n    );\n}\n\n\n\nexport default Dialog;","import s from \"../Dialogs.module.css\";\n\ntype PropsType = {\n    message: string\n}\n\nconst Message: React.FC<PropsType> = (props) => {\n    return (\n        <div>\n            <div className={s.message}> {props.message} </div>\n        </div>\n    );\n}\n\nexport default Message;","import s from \"./Dialogs.module.css\"\nimport Dialog from \"./Dialog/Dialog\";\nimport Message from \"./Message/Message\";\nimport React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport {initialStateType} from \"../../redux/dialogs-reducer\";\nimport {Avatar, Col, List, Row} from \"antd\";\nimport {NavLink} from \"react-router-dom\";\n\ntype PropsType = {\n    dialogsPage: initialStateType,\n    sendMessage: (messageText: string) => void\n}\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n\n    let state = props.dialogsPage\n    let dialogsElements = state.dialogs.map(el => <Dialog name={el.name} id={el.id} img={el.img} key={el.id}/>)\n    let messagesElements = state.messages.map(mas => <Message message={mas.message} key={mas.id}/>)\n\n\n    let sendNewMessage = (formData: {newMessageText: string}) => {\n        props.sendMessage(formData.newMessageText)\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col span={4}>\n                    <List\n                        itemLayout=\"horizontal\"\n                        dataSource={state.dialogs}\n                        renderItem={item => (\n                            <List.Item>\n                                <List.Item.Meta\n                                    avatar={<Avatar src={`https://joeschmoe.io/api/v1/${item.id}`} />}\n                                    title={<NavLink to={\"/dialogs/\" + item.id}>{item.name}</NavLink>}\n                                    // description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n                                />\n                            </List.Item>\n                        )}\n                    />\n                </Col>\n                <Col span={20}>\n                    <div className={s.messages}>\n                        <div>{messagesElements}</div>\n                        <div className={s.textInput}>\n                            <SendMessageReduxForm onSubmit={sendNewMessage}/>\n                        </div>\n                    </div>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nlet maxLength100 = maxLengthCreator(100)\n\ntype NewMessageFormValuesType = {\n    newMessageText: string\n}\ntype DialogsFormOwnPropsType = {}\n\nconst SendMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, DialogsFormOwnPropsType> & DialogsFormOwnPropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea}  placeholder={\"Write your message here... \"}  name={'newMessageText'} validate={[required, maxLength100]}/>\n            <button>Send</button>\n        </form>\n    )\n}\n\nlet SendMessageReduxForm = reduxForm<NewMessageFormValuesType, DialogsFormOwnPropsType>({form: 'writeMessage'})(SendMessageForm)\n\nexport default Dialogs;\n\n","import React from 'react';\nimport {actions} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from 'react-redux'\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\n\nlet mapStateToProps = (state: AppStateType) =>{\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {sendMessage: actions.sendMessage}),\n    withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}
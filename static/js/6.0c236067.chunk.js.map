{"version":3,"sources":["pages/GeneralChat/GeneralChatPage.tsx"],"names":["TextArea","Input","Chat","useState","socket","setSocket","useEffect","newSocket","reconnect","console","log","setTimeout","createWebSocket","removeEventListener","WebSocket","addEventListener","close","direction","style","width","Messeges","SendMessageForm","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","height","overflowY","map","m","index","Message","message","size","src","photo","userName","textMessage","setTextMessage","socketReadyStatus","setSocketReadyStatus","openHandler","justify","span","onChange","currentTarget","value","disabled","type","onClick","send","compose","withAuthRedirect"],"mappings":"2OAMOA,EAAYC,IAAZD,SAmBDE,EAAiB,WACnB,MAA4BC,mBAA2B,MAAvD,mBAAOC,EAAP,KAAeC,EAAf,KAwBA,OAtBAC,qBAAU,WACN,IAAIC,EACAC,EAAY,WACZC,QAAQC,IAAI,iBACZC,WAAWC,EAAiB,MAGhC,SAASA,IAAmB,IAAD,EAEd,QAAT,EAAAL,SAAA,SAAWM,oBAAoB,QAASL,IACxCD,EAAY,IAAIO,UAAU,iEAChBC,iBAAiB,QAASP,GACpCH,EAAUE,GAId,OAFAK,IAEM,WACFL,EAAUM,oBAAoB,QAASL,GACvCD,EAAUS,WAEf,IAGC,eAAC,IAAD,CAAOC,UAAW,WAAYC,MAAO,CAACC,MAAM,QAA5C,UACI,cAACC,EAAD,CAAUhB,OAAQA,IAClB,cAACiB,EAAD,CAAiBjB,OAAQA,QAK/BgB,EAAkD,SAAC,GAAc,IAAbhB,EAAY,EAAZA,OACvD,EAAgCD,mBAA4B,IAA5D,mBAAOmB,EAAP,KAAiBC,EAAjB,KAaC,OAXAjB,qBAAU,WACN,IAAIkB,EAAiB,SAACC,GAClB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BN,GAAY,SAACO,GAAD,4BAAsBA,GAAtB,YAAuCJ,QAIvD,OAFM,OAANtB,QAAM,IAANA,KAAQW,iBAAiB,UAAWS,GAE7B,yBAAMpB,QAAN,IAAMA,OAAN,EAAMA,EAAQS,oBAAoB,UAAWW,MAEpD,CAACpB,IAGD,qBAAKc,MAAO,CAAEa,OAAQ,sBAAuBC,UAAW,QAAxD,SACKV,EAASW,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAqBC,QAASH,GAAhBC,SAKhDC,EAAgD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpD,OACI,gCACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,KAAM,QAASC,IAAKF,EAAQG,QACpC,4BAAIH,EAAQI,cAEhB,8BACI,4BAAIJ,EAAQA,YAEhB,cAAC,IAAD,QAKNhB,EAAwD,SAAC,GAAc,IAAbjB,EAAY,EAAZA,OAE5D,EAAsCD,mBAAS,IAA/C,mBAAOuC,EAAP,KAAoBC,EAApB,KACA,EAAkDxC,mBAA8B,WAAhF,mBAAOyC,EAAP,KAA0BC,EAA1B,KAEAvC,qBAAW,WACP,IAAIwC,EAAc,kBAAMD,EAAqB,UAI7C,OAFM,OAANzC,QAAM,IAANA,KAAQW,iBAAiB,OAAQ+B,GAE1B,yBAAM1C,QAAN,IAAMA,OAAN,EAAMA,EAAQS,oBAAoB,OAAQiC,MAElD,CAAC1C,IASJ,OACI,eAAC,IAAD,CAAK2C,QAAS,gBAAd,UACI,cAAC,IAAD,CAAKC,KAAM,GAAX,SACI,cAAChD,EAAD,CAAUiD,SAAU,SAACxB,GAAD,OAAOkB,EAAelB,EAAEyB,cAAcC,QAAQA,MAAOT,MAE7E,cAAC,IAAD,CAAKM,KAAM,EAAX,SACI,eAAC,IAAD,CAAQI,SAAsB,OAAXhD,GAAyC,UAAtBwC,EAA+BS,KAAM,UAAWC,QAb9E,WACZZ,IAEE,OAANtC,QAAM,IAANA,KAAQmD,KAAKb,GACbC,EAAe,MASP,UACI,cAAC,IAAD,IADJ,iBAQDa,sBAA6BC,IAA7BD,EAlHmB,WAC9B,OACI,cAAC,IAAD,CAAKT,QAAS,SAAU7B,MAAO,CAACc,UAAW,QAA3C,SACI,cAAC,IAAD,CAAKgB,KAAM,GAAX,SACI,cAAC9C,EAAD","file":"static/js/6.0c236067.chunk.js","sourcesContent":["import {Button, Space, Input, Avatar, Divider, Row, Col} from \"antd\"\nimport {SendOutlined} from '@ant-design/icons';\nimport React, {useEffect, useState} from \"react\";\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"../../components/hoc/withAuthRedirect\";\n\nconst {TextArea} = Input\n\nexport type ChatMessageType = {\n    message: string,\n    photo: string,\n    userId: number,\n    userName: string\n}\n\nconst GeneralChatPage: React.FC = () => {\n    return (\n        <Row justify={\"center\"} style={{overflowY: 'auto'}}>\n            <Col span={12}>\n                <Chat />\n            </Col>\n        </Row>\n    )\n}\n\nconst Chat: React.FC = () => {\n    const [socket, setSocket] = useState<WebSocket | null>(null)\n\n    useEffect(() =>  {\n        let newSocket: WebSocket\n        let reconnect = () => {\n            console.log('SOCKET CLOSED')\n            setTimeout(createWebSocket, 3000)\n        }\n\n        function createWebSocket() {\n\n            newSocket?.removeEventListener('close', reconnect)\n            newSocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n            newSocket.addEventListener('close', reconnect)\n            setSocket(newSocket)\n        }\n        createWebSocket()\n\n        return() => {\n            newSocket.removeEventListener('close', reconnect)\n            newSocket.close()\n        }\n    }, [])\n\n    return(\n        <Space direction={'vertical'} style={{width:'100%'}}>\n            <Messeges socket={socket}/>\n            <SendMessageForm socket={socket}/>\n        </Space>\n    )\n}\n\nconst Messeges: React.FC<{ socket: WebSocket | null}> = ({socket}) => {\n   const [messages, setMessages] = useState<ChatMessageType[]>([])\n\n    useEffect(() => {\n        let messageHandler = (e: MessageEvent) => {\n            let newMessages = JSON.parse(e.data)\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\n        }\n        socket?.addEventListener('message', messageHandler)\n\n        return () => socket?.removeEventListener('message', messageHandler)\n\n    } , [socket])\n\n    return (\n        <div style={{ height: 'calc(100vh - 250px)', overflowY: 'auto'}}>\n            {messages.map((m, index) => <Message key={index} message={m} />)}\n        </div>\n    )\n}\n\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\n    return (\n        <div >\n            <Space>\n                <Avatar size={'large'} src={message.photo} />\n                <b>{message.userName}</b>\n            </Space>\n            <div>\n                <p>{message.message}</p>\n            </div>\n            <Divider/>\n        </div>\n    )\n}\n\nconst SendMessageForm: React.FC<{socket: WebSocket | null}> = ({socket}) => {\n\n    const [textMessage, setTextMessage] = useState('')\n    const [socketReadyStatus, setSocketReadyStatus] = useState<'pending' | 'ready'>('pending')\n\n    useEffect( () => {\n        let openHandler = () => setSocketReadyStatus('ready')\n\n        socket?.addEventListener('open', openHandler)\n\n        return () => socket?.removeEventListener('open', openHandler)\n\n    }, [socket])\n\n    const sendMessage = () => {\n        if(!textMessage){ return }\n\n        socket?.send(textMessage)\n        setTextMessage('')\n    }\n\n    return (\n        <Row justify={'space-between'}>\n            <Col span={19}>\n                <TextArea onChange={(e) => setTextMessage(e.currentTarget.value)} value={textMessage}/>\n            </Col>\n            <Col span={4}>\n                <Button disabled={ socket === null || socketReadyStatus !== 'ready'} type={'primary'} onClick={sendMessage}>\n                    <SendOutlined /> Send\n                </Button>\n            </Col>\n        </Row>\n    )\n}\n\nexport default compose<React.ComponentType>(withAuthRedirect)(GeneralChatPage)"],"sourceRoot":""}
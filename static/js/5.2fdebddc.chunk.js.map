{"version":3,"sources":["pages/GeneralChat/GeneralChatPage.tsx"],"names":["TextArea","Input","socket","WebSocket","Chat","direction","style","width","Messeges","SendMessageForm","useState","messages","setMessages","useEffect","addEventListener","e","newMessages","JSON","parse","data","prevMessages","height","overflowY","map","m","index","Message","message","size","src","photo","userName","textMessage","setTextMessage","socketReadyStatus","setSocketReadyStatus","justify","span","onChange","currentTarget","value","disabled","type","onClick","send","GeneralChatPage"],"mappings":"0NAIOA,EAAYC,IAAZD,SAEDE,EAAS,IAAIC,UAAU,gEAmBvBC,EAAiB,WACnB,OACI,eAAC,IAAD,CAAOC,UAAW,WAAYC,MAAO,CAACC,MAAM,QAA5C,UACI,cAACC,EAAD,IACA,cAACC,EAAD,QAKND,EAAqB,WAExB,MAAgCE,mBAA4B,IAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KASC,OAPAC,qBAAU,WACNX,EAAOY,iBAAiB,WAAW,SAACC,GAChC,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BP,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCJ,YAEvD,IAGA,qBAAKV,MAAO,CAAEe,OAAQ,sBAAuBC,UAAW,QAAxD,SACKX,EAASY,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAASC,QAASH,GAAQC,SAK5DC,EAAgD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpD,OACI,gCACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,KAAM,QAASC,IAAKF,EAAQG,QACpC,4BAAIH,EAAQI,cAEhB,8BACI,4BAAIJ,EAAQA,YAEhB,cAAC,IAAD,QAKNlB,EAA4B,WAE9B,MAAsCC,mBAAS,IAA/C,mBAAOsB,EAAP,KAAoBC,EAApB,KACA,EAAkDvB,mBAA8B,WAAhF,mBAAOwB,EAAP,KAA0BC,EAA1B,KAEAtB,qBAAW,WACPX,EAAOY,iBAAiB,QAAQ,WAC5BqB,EAAqB,cAE1B,IASH,OACI,eAAC,IAAD,CAAKC,QAAS,gBAAd,UACI,cAAC,IAAD,CAAKC,KAAM,GAAX,SACI,cAACrC,EAAD,CAAUsC,SAAU,SAACvB,GAAD,OAAOkB,EAAelB,EAAEwB,cAAcC,QAAQA,MAAOR,MAE7E,cAAC,IAAD,CAAKK,KAAM,EAAX,SACI,eAAC,IAAD,CAAQI,SAAgC,UAAtBP,EAA+BQ,KAAM,UAAWC,QAb1D,WACZX,IAEJ9B,EAAO0C,KAAKZ,GACZC,EAAe,MASP,UACI,cAAC,IAAD,IADJ,iBAQDY,UApFmB,WAC9B,OACI,cAAC,IAAD,CAAKT,QAAS,SAAU9B,MAAO,CAAEe,OAAQ,sBAAuBC,UAAW,QAA3E,SACI,cAAC,IAAD,CAAKe,KAAM,GAAX,SACI,cAACjC,EAAD","file":"static/js/5.2fdebddc.chunk.js","sourcesContent":["import {Button, Space, Input, Avatar, Divider, Row, Col} from \"antd\"\nimport {SendOutlined} from '@ant-design/icons';\nimport {useEffect, useState} from \"react\";\n\nconst {TextArea} = Input\n\nconst socket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n\nexport type ChatMessageType = {\n    message: string,\n    photo: string,\n    userId: number,\n    userName: string\n}\n\nconst GeneralChatPage: React.FC = () => {\n    return (\n        <Row justify={\"center\"} style={{ height: 'calc(100vh - 188px)', overflowY: 'auto'}}>\n            <Col span={12}>\n                <Chat />\n            </Col>\n        </Row>\n    )\n}\n\nconst Chat: React.FC = () => {\n    return(\n        <Space direction={'vertical'} style={{width:'100%'}}>\n            <Messeges />\n            <SendMessageForm />\n        </Space>\n    )\n}\n\nconst Messeges: React.FC = () => {\n\n   const [messages, setMessages] = useState<ChatMessageType[]>([])\n\n    useEffect(() => {\n        socket.addEventListener('message', (e) => {\n            let newMessages = JSON.parse(e.data)\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\n        })\n    } , [])\n\n    return (\n        <div style={{ height: 'calc(100vh - 250px)', overflowY: 'auto'}}>\n            {messages.map((m, index) => <Message message={m} key={index}/>)}\n        </div>\n    )\n}\n\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\n    return (\n        <div >\n            <Space>\n                <Avatar size={'large'} src={message.photo} />\n                <b>{message.userName}</b>\n            </Space>\n            <div>\n                <p>{message.message}</p>\n            </div>\n            <Divider/>\n        </div>\n    )\n}\n\nconst SendMessageForm: React.FC = () => {\n\n    const [textMessage, setTextMessage] = useState('')\n    const [socketReadyStatus, setSocketReadyStatus] = useState<'pending' | 'ready'>('pending')\n\n    useEffect( () => {\n        socket.addEventListener('open', () => {\n            setSocketReadyStatus('ready')\n        })\n    }, [])\n\n    const sendMessage = () => {\n        if(!textMessage){ return }\n\n        socket.send(textMessage)\n        setTextMessage('')\n    }\n\n    return (\n        <Row justify={'space-between'}>\n            <Col span={19}>\n                <TextArea onChange={(e) => setTextMessage(e.currentTarget.value)} value={textMessage}/>\n            </Col>\n            <Col span={4}>\n                <Button disabled={socketReadyStatus !== 'ready'} type={'primary'} onClick={sendMessage}>\n                    <SendOutlined /> Send\n                </Button>\n            </Col>\n        </Row>\n    )\n}\n\nexport default GeneralChatPage"],"sourceRoot":""}